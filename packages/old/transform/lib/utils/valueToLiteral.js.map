{"version":3,"file":"valueToLiteral.js","names":["_getSource","require","_isSerializable","valueToLiteral","value","ex","console","log","undefined","type","name","isSerializable","Array","isArray","elements","map","v","properties","Object","entries","key","match","computed","shorthand","buildCodeFrameError","getSource"],"sources":["../../src/utils/valueToLiteral.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Expression } from '@babel/types';\n\nimport { getSource } from './getSource';\nimport { isSerializable } from './isSerializable';\n\nexport function valueToLiteral(value: unknown, ex: NodePath): Expression {\n  console.log(\"valueToLiteral - valueToLiteral\");\n  if (value === undefined) {\n    return {\n      type: 'Identifier',\n      name: 'undefined',\n    };\n  }\n\n  if (isSerializable(value)) {\n    if (value === null) {\n      return {\n        type: 'NullLiteral',\n      };\n    }\n\n    if (typeof value === 'string') {\n      return {\n        type: 'StringLiteral',\n        value,\n      };\n    }\n\n    if (typeof value === 'number') {\n      return {\n        type: 'NumericLiteral',\n        value,\n      };\n    }\n\n    if (typeof value === 'boolean') {\n      return {\n        type: 'BooleanLiteral',\n        value,\n      };\n    }\n\n    if (Array.isArray(value)) {\n      return {\n        type: 'ArrayExpression',\n        elements: value.map((v) => valueToLiteral(v, ex)),\n      };\n    }\n\n    return {\n      type: 'ObjectExpression',\n      properties: Object.entries(value).map(([key, v]) => ({\n        type: 'ObjectProperty',\n        key: key.match(/^[a-zA-Z]\\w*$/)\n          ? {\n              type: 'Identifier',\n              name: key,\n            }\n          : {\n              type: 'StringLiteral',\n              value: key,\n            },\n        value: valueToLiteral(v, ex),\n        computed: false,\n        shorthand: false,\n      })),\n    };\n  }\n\n  throw ex.buildCodeFrameError(\n    `The expression evaluated to '${value}', which is probably a mistake. If you want it to be inserted into CSS, explicitly cast or transform the value to a string, e.g. - 'String(${getSource(\n      ex\n    )})'.`\n  );\n}\n"],"mappings":";;;;;;AAGA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,eAAA,GAAAD,OAAA;AAEO,SAASE,cAAcA,CAACC,KAAc,EAAEC,EAAY,EAAc;EACvEC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAC9C,IAAIH,KAAK,KAAKI,SAAS,EAAE;IACvB,OAAO;MACLC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAI,IAAAC,8BAAc,EAACP,KAAK,CAAC,EAAE;IACzB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO;QACLK,IAAI,EAAE;MACR,CAAC;IACH;IAEA,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO;QACLK,IAAI,EAAE,eAAe;QACrBL;MACF,CAAC;IACH;IAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO;QACLK,IAAI,EAAE,gBAAgB;QACtBL;MACF,CAAC;IACH;IAEA,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;MAC9B,OAAO;QACLK,IAAI,EAAE,gBAAgB;QACtBL;MACF,CAAC;IACH;IAEA,IAAIQ,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,EAAE;MACxB,OAAO;QACLK,IAAI,EAAE,iBAAiB;QACvBK,QAAQ,EAAEV,KAAK,CAACW,GAAG,CAAEC,CAAC,IAAKb,cAAc,CAACa,CAAC,EAAEX,EAAE,CAAC;MAClD,CAAC;IACH;IAEA,OAAO;MACLI,IAAI,EAAE,kBAAkB;MACxBQ,UAAU,EAAEC,MAAM,CAACC,OAAO,CAACf,KAAK,CAAC,CAACW,GAAG,CAAC,CAAC,CAACK,GAAG,EAAEJ,CAAC,CAAC,MAAM;QACnDP,IAAI,EAAE,gBAAgB;QACtBW,GAAG,EAAEA,GAAG,CAACC,KAAK,CAAC,eAAe,CAAC,GAC3B;UACEZ,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAEU;QACR,CAAC,GACD;UACEX,IAAI,EAAE,eAAe;UACrBL,KAAK,EAAEgB;QACT,CAAC;QACLhB,KAAK,EAAED,cAAc,CAACa,CAAC,EAAEX,EAAE,CAAC;QAC5BiB,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC;EACH;EAEA,MAAMlB,EAAE,CAACmB,mBAAmB,CACzB,gCAA+BpB,KAAM,8IAA6I,IAAAqB,oBAAS,EAC1LpB,EACF,CAAE,KACJ,CAAC;AACH","ignoreList":[]}