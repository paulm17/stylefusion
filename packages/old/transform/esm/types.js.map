{"version":3,"file":"types.js","names":[],"sources":["../src/types.ts"],"sourcesContent":["import type { BabelFile, PluginPass } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\nimport type { File, Program } from '@babel/types';\nimport type { RawSourceMap } from 'source-map';\n\nimport type { BaseProcessor } from '@wyw-in-js/processor-utils';\nimport type {\n  Debugger,\n  Replacement,\n  Rules,\n  StrictOptions,\n} from '@wyw-in-js/shared';\n\nimport type { WYWTransformMetadata } from './utils/TransformMetadata';\n\nexport type PluginOptions = StrictOptions & {\n  configFile?: string | false;\n  stage?: Stage;\n};\n\nexport type ParentEntrypoint = {\n  evaluated: boolean;\n  log: Debugger;\n  name: string;\n  parents: ParentEntrypoint[];\n  seqId: number;\n};\n\nexport type Dependencies = string[];\n\nexport interface IPluginState extends PluginPass {\n  dependencies: Dependencies;\n  file: BabelFile & {\n    metadata: {\n      wywInJS?: WYWTransformMetadata;\n    };\n  };\n  processors: BaseProcessor[];\n}\n\nexport interface ITransformFileResult {\n  code: string;\n  metadata: WYWTransformMetadata | null;\n}\n\nexport type Stage = 'preeval' | 'collect';\n\nexport type Result = {\n  code: string;\n  cssSourceMapText?: string;\n  cssText?: string;\n  dependencies?: string[];\n  replacements?: Replacement[];\n  rules?: Rules;\n  sourceMap?: RawSourceMap | null;\n};\n\nexport type Options = {\n  filename: string;\n  inputSourceMap?: RawSourceMap;\n  outputFilename?: string;\n  pluginOptions?: Partial<PluginOptions>;\n  preprocessor?: Preprocessor;\n  root?: string;\n};\n\nexport type PreprocessorFn = (selector: string, cssText: string) => string;\nexport type Preprocessor = 'none' | 'stylis' | PreprocessorFn | void;\n\nexport type MissedBabelCoreTypes = {\n  File: new (\n    options: { filename: string },\n    file: { ast: File; code: string }\n  ) => { path: NodePath<Program> };\n};\n\nexport type JSONValue =\n  | null\n  | string\n  | number\n  | boolean\n  | JSONObject\n  | JSONArray;\n\nexport interface JSONObject {\n  [x: string]: JSONValue;\n}\n\nexport type JSONArray = Array<JSONValue>;\n\nexport type Serializable = JSONValue;\n\n/**\n * CSS-related types\n */\n"],"mappings":"","ignoreList":[]}