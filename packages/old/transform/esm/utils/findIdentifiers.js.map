{"version":3,"file":"findIdentifiers.js","names":["getScope","isInUnary","path","console","log","parentPath","isUnaryExpression","isInDelete","node","operator","isBindingIdentifier","isReferencedIdentifier","checkers","any","ex","binding","declaration","scope","getBinding","name","identifier","reference","nonType","find","p","isTSTypeReference","isTSTypeQuery","isFlowType","isFlowDeclaration","isTSInterfaceDeclaration","findIdentifiers","expressions","type","identifiers","forEach","emit","removed","isAncestor","push","isIdentifier","isJSXIdentifier","traverse","Identifier","JSXIdentifier"],"sources":["../../src/utils/findIdentifiers.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type {\n  Node,\n  Identifier,\n  JSXIdentifier,\n  UnaryExpression,\n} from '@babel/types';\n\nimport { getScope } from './getScope';\n\ntype FindType = 'any' | 'binding' | 'declaration' | 'reference';\n\nfunction isInUnary<T extends NodePath>(\n  path: T\n): path is T & { parentPath: NodePath<UnaryExpression> } {\n  console.log(\"findIdentifiers - isInUnary\");\n  return path.parentPath?.isUnaryExpression() ?? false;\n}\n\n// It's possible for non-strict mode code to have variable deletions.\nfunction isInDelete(path: { parentPath: NodePath<UnaryExpression> }): boolean {\n  console.log(\"findIdentifiers - isInDelete\");\n  return path.parentPath.node.operator === 'delete';\n}\n\nfunction isBindingIdentifier(path: NodePath): path is NodePath<Identifier> {\n  console.log(\"findIdentifiers - isBindingIdentifier\");\n  return path.isBindingIdentifier() && (!isInUnary(path) || isInDelete(path));\n}\n\nfunction isReferencedIdentifier(\n  path: NodePath\n): path is NodePath<Identifier | JSXIdentifier> {\n  console.log(\"findIdentifiers - isReferencedIdentifier\");\n  return (\n    path.isReferencedIdentifier() || (isInUnary(path) && !isInDelete(path))\n  );\n}\n\n// For some reasons, `isBindingIdentifier` returns true for identifiers inside unary expressions.\nconst checkers: Record<\n  FindType,\n  (ex: NodePath<Identifier | JSXIdentifier>) => boolean\n> = {\n  any: (ex) => isBindingIdentifier(ex) || isReferencedIdentifier(ex),\n  binding: (ex) => isBindingIdentifier(ex),\n  declaration: (ex) =>\n    isBindingIdentifier(ex) &&\n    ex.scope.getBinding(ex.node.name)?.identifier === ex.node,\n  reference: (ex) => isReferencedIdentifier(ex),\n};\n\nexport function nonType(path: NodePath): boolean {\n  console.log(\"findIdentifiers - nonType\");\n  return !path.find(\n    (p) =>\n      p.isTSTypeReference() ||\n      p.isTSTypeQuery() ||\n      p.isFlowType() ||\n      p.isFlowDeclaration() ||\n      p.isTSInterfaceDeclaration()\n  );\n}\n\nexport function findIdentifiers(\n  expressions: NodePath<Node | null | undefined>[],\n  type: FindType = 'reference'\n): NodePath<Identifier | JSXIdentifier>[] {\n  console.log(\"findIdentifiers - findIdentifiers\");\n  const identifiers: NodePath<Identifier | JSXIdentifier>[] = [];\n\n  expressions.forEach((ex) => {\n    const emit = (path: NodePath<Identifier | JSXIdentifier>) => {\n      if (!path.node || path.removed || !checkers[type](path)) {\n        return;\n      }\n\n      // TODO: Is there a better way to check that it's a local variable?\n\n      const binding = getScope(path).getBinding(path.node.name);\n      if (!binding) {\n        return;\n      }\n\n      if (type === 'reference' && ex.isAncestor(binding.path)) {\n        // This identifier is declared inside the expression. We don't need it.\n        return;\n      }\n\n      identifiers.push(path);\n    };\n\n    if (ex.isIdentifier() || ex.isJSXIdentifier()) {\n      emit(ex);\n    } else {\n      ex.traverse({\n        Identifier(path: NodePath<Identifier>) {\n          emit(path);\n        },\n        JSXIdentifier(path: NodePath<JSXIdentifier>) {\n          emit(path);\n        },\n      });\n    }\n  });\n\n  return identifiers;\n}\n"],"mappings":"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","ignoreList":[]}